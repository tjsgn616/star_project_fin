# -*- coding: utf-8 -*-
"""미세먼지_풍향

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cr1fBraDh4IRs-tBhpP3LkIIg7boPval
"""

import pandas as pd
import numpy as np
import os
#import plotly
# from google.colab import drive
# drive.mount('/content/gdrive')

# seoul2018 = pd.read_csv("/content/gdrive/MyDrive/Colab Notebooks/dust/seoul/SURFACE_ASOS_108_HR_2018_2018_2019.csv", encoding='cp949')
# seoul2019 = pd.read_csv("/content/gdrive/MyDrive/Colab Notebooks/dust/seoul/SURFACE_ASOS_108_HR_2019_2019_2020.csv", encoding='cp949')
# seoul2020 = pd.read_csv("/content/gdrive/MyDrive/Colab Notebooks/dust/seoul/SURFACE_ASOS_108_HR_2020_2020_2021.csv", encoding='cp949')
# seoul2021 = pd.read_csv("/content/gdrive/MyDrive/Colab Notebooks/dust/seoul/SURFACE_ASOS_108_HR_2021_2021_2022.csv", encoding='cp949')

# mi2018 = pd.read_csv("/content/gdrive/MyDrive/Colab Notebooks/dust/seoul/ENV_YDST_108_HR_2018_2018_2019.csv", encoding='cp949')
# mi2019 = pd.read_csv("/content/gdrive/MyDrive/Colab Notebooks/dust/seoul/ENV_YDST_108_HR_2019_2019_2020.csv", encoding='cp949')
# mi2020 = pd.read_csv("/content/gdrive/MyDrive/Colab Notebooks/dust/seoul/ENV_YDST_108_HR_2020_2020_2021.csv", encoding='cp949')
# mi2021 = pd.read_csv("/content/gdrive/MyDrive/Colab Notebooks/dust/seoul/ENV_YDST_108_HR_2021_2021_2022.csv", encoding='cp949')
dir = os.path.dirname(os.path.realpath(__file__))
print(dir)
seoul2018 = pd.read_csv(dir+"/need_files/SURFACE_ASOS_108_HR_2018_2018_2019.csv", encoding='cp949')
seoul2019 = pd.read_csv(dir +"/need_files/SURFACE_ASOS_108_HR_2019_2019_2020.csv", encoding='cp949')
seoul2020 = pd.read_csv(dir +"/need_files/SURFACE_ASOS_108_HR_2020_2020_2021.csv", encoding='cp949')
seoul2021 = pd.read_csv(dir + "/need_files/SURFACE_ASOS_108_HR_2021_2021_2022.csv", encoding='cp949')

mi2018 = pd.read_csv(dir+"/need_files/ENV_YDST_108_HR_2018_2018_2019.csv", encoding='cp949')
mi2019 = pd.read_csv(dir+"/need_files/ENV_YDST_108_HR_2019_2019_2020.csv", encoding='cp949')
mi2020 = pd.read_csv(dir+"/need_files/ENV_YDST_108_HR_2020_2020_2021.csv", encoding='cp949')
mi2021 = pd.read_csv(dir+"/need_files/ENV_YDST_108_HR_2021_2021_2022.csv", encoding='cp949')

seoul2018.columns
mi2019.info()

se18 = seoul2018[['일시','풍속(m/s)','풍향(16방위)']]
se19 = seoul2019[['일시','풍속(m/s)','풍향(16방위)']]
se20 = seoul2020[['일시','풍속(m/s)','풍향(16방위)']]
se21 = seoul2021[['일시','풍속(m/s)','풍향(16방위)']]



mi18 = mi2018.iloc[:,1:]
mi19 = mi2019.iloc[:,1:]
mi20 = mi2020.iloc[:,1:]
mi21 = mi2021.iloc[:,1:]

"""### 풍속 데이터와 미세먼지 데이터 조인"""

data18 = pd.merge(se18, mi18, "left", on="일시")
data19 = pd.merge(se19, mi19, "left", on="일시")
data20 = pd.merge(se20, mi20, "left", on="일시")
data21 = pd.merge(se21, mi21, "left", on="일시")

"""### 결측치 확인
- 풍속과 관련해서는 결측치가 별루 없음
- 미세먼지에 관해서 결측치가 많이 존재함 -> 그날 하루 평균으로 값을 처리
"""

#print(data18.isnull().sum(), data19.isnull().sum(),data20.isnull().sum(),data21.isnull().sum())

data18.iloc[979:985]

# 결측치 처리 -> 평균값으로 가기 보다는 흐름이 있기 때문에 이전 값을 가져오는 형식으로 진행
# data18 = data18.fillna(method="ffill")
data18 = data18.fillna(data18.interpolate())

data18.isnull().sum()

data18.iloc[979:985]

"""앞의 값과 뒤의 값의 평균으로 결측치 처리 완료"""

data19 = data19.fillna(data19.interpolate())
data20 = data20.fillna(data20.interpolate())
data21 = data21.fillna(data21.interpolate())

#print(data18.isnull().sum(), data19.isnull().sum(),data20.isnull().sum(),data21.isnull().sum())


data18.info()

data18['풍향'] = data18['풍향(16방위)']
data18

data18['풍향D'] = data18['풍향(16방위)']
data18

data18.loc[(data18['풍향(16방위)'] >= 0.0) & (data18['풍향(16방위)'] < 11.25) , '풍향D'] = 0
data18.loc[(data18['풍향(16방위)'] >= 11.25) & (data18['풍향(16방위)'] < 33.75) , '풍향D'] = 22.5
data18.loc[(data18['풍향(16방위)'] >= 33.75) & (data18['풍향(16방위)'] < 56.25) , '풍향D'] = 45
data18.loc[(data18['풍향(16방위)'] >= 56.25) & (data18['풍향(16방위)'] < 78.75) , '풍향D'] = 67.5
data18.loc[(data18['풍향(16방위)'] >= 78.75) & (data18['풍향(16방위)'] < 101.25) , '풍향D'] = 90
data18.loc[(data18['풍향(16방위)'] >= 101.25) & (data18['풍향(16방위)'] < 123.75) , '풍향D'] = 112.5
data18.loc[(data18['풍향(16방위)'] >= 123.75) & (data18['풍향(16방위)'] < 146.25) , '풍향D'] = 135
data18.loc[(data18['풍향(16방위)'] >= 146.25) & (data18['풍향(16방위)'] < 168.75) , '풍향D'] = 157.5
data18.loc[(data18['풍향(16방위)'] >= 168.75) & (data18['풍향(16방위)'] < 191.25) , '풍향D'] = 180
data18.loc[(data18['풍향(16방위)'] >= 191.25) & (data18['풍향(16방위)'] < 213.75) , '풍향D'] = 202.5
data18.loc[(data18['풍향(16방위)'] >= 213.75) & (data18['풍향(16방위)'] < 236.25) , '풍향D'] = 225
data18.loc[(data18['풍향(16방위)'] >= 236.25) & (data18['풍향(16방위)'] < 258.75) , '풍향D'] = 247.5
data18.loc[(data18['풍향(16방위)'] >= 258.75) & (data18['풍향(16방위)'] < 281.25) , '풍향D'] = 270
data18.loc[(data18['풍향(16방위)'] >= 281.25) & (data18['풍향(16방위)'] < 303.75) , '풍향D'] = 292.5
data18.loc[(data18['풍향(16방위)'] >= 303.75) & (data18['풍향(16방위)'] < 326.25) , '풍향D'] = 315
data18.loc[(data18['풍향(16방위)'] >= 326.25) & (data18['풍향(16방위)'] < 348.75) , '풍향D'] = 337.5
data18.loc[(data18['풍향(16방위)'] >=348.75) & (data18['풍향(16방위)'] <= 360) , '풍향D'] = 0

data19.loc[(data19['풍향(16방위)'] >= 0.0) & (data19['풍향(16방위)'] < 11.25) , '풍향D'] = 0
data19.loc[(data19['풍향(16방위)'] >= 11.25) & (data19['풍향(16방위)'] < 33.75) , '풍향D'] = 22.5
data19.loc[(data19['풍향(16방위)'] >= 33.75) & (data19['풍향(16방위)'] < 56.25) , '풍향D'] = 45
data19.loc[(data19['풍향(16방위)'] >= 56.25) & (data19['풍향(16방위)'] < 78.75) , '풍향D'] = 67.5
data19.loc[(data19['풍향(16방위)'] >= 78.75) & (data19['풍향(16방위)'] < 101.25) , '풍향D'] = 90
data19.loc[(data19['풍향(16방위)'] >= 101.25) & (data19['풍향(16방위)'] < 123.75) , '풍향D'] = 112.5
data19.loc[(data19['풍향(16방위)'] >= 123.75) & (data19['풍향(16방위)'] < 146.25) , '풍향D'] = 135
data19.loc[(data19['풍향(16방위)'] >= 146.25) & (data19['풍향(16방위)'] < 168.75) , '풍향D'] = 157.5
data19.loc[(data19['풍향(16방위)'] >= 168.75) & (data19['풍향(16방위)'] < 191.25) , '풍향D'] = 180
data19.loc[(data19['풍향(16방위)'] >= 191.25) & (data19['풍향(16방위)'] < 213.75) , '풍향D'] = 202.5
data19.loc[(data19['풍향(16방위)'] >= 213.75) & (data19['풍향(16방위)'] < 236.25) , '풍향D'] = 225
data19.loc[(data19['풍향(16방위)'] >= 236.25) & (data19['풍향(16방위)'] < 258.75) , '풍향D'] = 247.5
data19.loc[(data19['풍향(16방위)'] >= 258.75) & (data19['풍향(16방위)'] < 281.25) , '풍향D'] = 270
data19.loc[(data19['풍향(16방위)'] >= 281.25) & (data19['풍향(16방위)'] < 303.75) , '풍향D'] = 292.5
data19.loc[(data19['풍향(16방위)'] >= 303.75) & (data19['풍향(16방위)'] < 326.25) , '풍향D'] = 315
data19.loc[(data19['풍향(16방위)'] >= 326.25) & (data19['풍향(16방위)'] < 348.75) , '풍향D'] = 337.5
data19.loc[(data19['풍향(16방위)'] >=348.75) & (data19['풍향(16방위)'] <= 360) , '풍향D'] = 0

data20.loc[(data20['풍향(16방위)'] >= 0.0) & (data20['풍향(16방위)'] < 11.25) , '풍향D'] = 0
data20.loc[(data20['풍향(16방위)'] >= 11.25) & (data20['풍향(16방위)'] < 33.75) , '풍향D'] = 22.5
data20.loc[(data20['풍향(16방위)'] >= 33.75) & (data20['풍향(16방위)'] < 56.25) , '풍향D'] = 45
data20.loc[(data20['풍향(16방위)'] >= 56.25) & (data20['풍향(16방위)'] < 78.75) , '풍향D'] = 67.5
data20.loc[(data20['풍향(16방위)'] >= 78.75) & (data20['풍향(16방위)'] < 101.25) , '풍향D'] = 90
data20.loc[(data20['풍향(16방위)'] >= 101.25) & (data20['풍향(16방위)'] < 123.75) , '풍향D'] = 112.5
data20.loc[(data20['풍향(16방위)'] >= 123.75) & (data20['풍향(16방위)'] < 146.25) , '풍향D'] = 135
data20.loc[(data20['풍향(16방위)'] >= 146.25) & (data20['풍향(16방위)'] < 168.75) , '풍향D'] = 157.5
data20.loc[(data20['풍향(16방위)'] >= 168.75) & (data20['풍향(16방위)'] < 191.25) , '풍향D'] = 180
data20.loc[(data20['풍향(16방위)'] >= 191.25) & (data20['풍향(16방위)'] < 213.75) , '풍향D'] = 202.5
data20.loc[(data20['풍향(16방위)'] >= 213.75) & (data20['풍향(16방위)'] < 236.25) , '풍향D'] = 225
data20.loc[(data20['풍향(16방위)'] >= 236.25) & (data20['풍향(16방위)'] < 258.75) , '풍향D'] = 247.5
data20.loc[(data20['풍향(16방위)'] >= 258.75) & (data20['풍향(16방위)'] < 281.25) , '풍향D'] = 270
data20.loc[(data20['풍향(16방위)'] >= 281.25) & (data20['풍향(16방위)'] < 303.75) , '풍향D'] = 292.5
data20.loc[(data20['풍향(16방위)'] >= 303.75) & (data20['풍향(16방위)'] < 326.25) , '풍향D'] = 315
data20.loc[(data20['풍향(16방위)'] >= 326.25) & (data20['풍향(16방위)'] < 348.75) , '풍향D'] = 337.5
data20.loc[(data20['풍향(16방위)'] >=348.75) & (data20['풍향(16방위)'] <= 360) , '풍향D'] = 0

data21.loc[(data21['풍향(16방위)'] >= 0.0) & (data21['풍향(16방위)'] < 11.25) , '풍향D'] = 0
data21.loc[(data21['풍향(16방위)'] >= 11.25) & (data21['풍향(16방위)'] < 33.75) , '풍향D'] = 22.5
data21.loc[(data21['풍향(16방위)'] >= 33.75) & (data21['풍향(16방위)'] < 56.25) , '풍향D'] = 45
data21.loc[(data21['풍향(16방위)'] >= 56.25) & (data21['풍향(16방위)'] < 78.75) , '풍향D'] = 67.5
data21.loc[(data21['풍향(16방위)'] >= 78.75) & (data21['풍향(16방위)'] < 101.25) , '풍향D'] = 90
data21.loc[(data21['풍향(16방위)'] >= 101.25) & (data21['풍향(16방위)'] < 123.75) , '풍향D'] = 112.5
data21.loc[(data21['풍향(16방위)'] >= 123.75) & (data21['풍향(16방위)'] < 146.25) , '풍향D'] = 135
data21.loc[(data21['풍향(16방위)'] >= 146.25) & (data21['풍향(16방위)'] < 168.75) , '풍향D'] = 157.5
data21.loc[(data21['풍향(16방위)'] >= 168.75) & (data21['풍향(16방위)'] < 191.25) , '풍향D'] = 180
data21.loc[(data21['풍향(16방위)'] >= 191.25) & (data21['풍향(16방위)'] < 213.75) , '풍향D'] = 202.5
data21.loc[(data21['풍향(16방위)'] >= 213.75) & (data21['풍향(16방위)'] < 236.25) , '풍향D'] = 225
data21.loc[(data21['풍향(16방위)'] >= 236.25) & (data21['풍향(16방위)'] < 258.75) , '풍향D'] = 247.5
data21.loc[(data21['풍향(16방위)'] >= 258.75) & (data21['풍향(16방위)'] < 281.25) , '풍향D'] = 270
data21.loc[(data21['풍향(16방위)'] >= 281.25) & (data21['풍향(16방위)'] < 303.75) , '풍향D'] = 292.5
data21.loc[(data21['풍향(16방위)'] >= 303.75) & (data21['풍향(16방위)'] < 326.25) , '풍향D'] = 315
data21.loc[(data21['풍향(16방위)'] >= 326.25) & (data21['풍향(16방위)'] < 348.75) , '풍향D'] = 337.5
data21.loc[(data21['풍향(16방위)'] >=348.75) & (data21['풍향(16방위)'] <= 360) , '풍향D'] = 0

data18.loc[(data18['풍향(16방위)'] >= 0.0) & (data18['풍향(16방위)'] < 11.25) , '풍향'] = "북"
data18.loc[(data18['풍향(16방위)'] >= 11.25) & (data18['풍향(16방위)'] < 33.75) , '풍향'] = "북북동"
data18.loc[(data18['풍향(16방위)'] >= 33.75) & (data18['풍향(16방위)'] < 56.25) , '풍향'] = "북동"
data18.loc[(data18['풍향(16방위)'] >= 56.25) & (data18['풍향(16방위)'] < 78.75) , '풍향'] = "동북동"
data18.loc[(data18['풍향(16방위)'] >= 78.75) & (data18['풍향(16방위)'] < 101.25) , '풍향'] = "동"
data18.loc[(data18['풍향(16방위)'] >= 101.25) & (data18['풍향(16방위)'] < 123.75) , '풍향'] = "동남동"
data18.loc[(data18['풍향(16방위)'] >= 123.75) & (data18['풍향(16방위)'] < 146.25) , '풍향'] = "남동"
data18.loc[(data18['풍향(16방위)'] >= 146.25) & (data18['풍향(16방위)'] < 168.75) , '풍향'] = "남남동"
data18.loc[(data18['풍향(16방위)'] >= 168.75) & (data18['풍향(16방위)'] < 191.25) , '풍향'] = "남"
data18.loc[(data18['풍향(16방위)'] >= 191.25) & (data18['풍향(16방위)'] < 213.75) , '풍향'] = "남남서"
data18.loc[(data18['풍향(16방위)'] >= 213.75) & (data18['풍향(16방위)'] < 236.25) , '풍향'] = "남서"
data18.loc[(data18['풍향(16방위)'] >= 236.25) & (data18['풍향(16방위)'] < 258.75) , '풍향'] = "서남서"
data18.loc[(data18['풍향(16방위)'] >= 258.75) & (data18['풍향(16방위)'] < 281.25) , '풍향'] = "서"
data18.loc[(data18['풍향(16방위)'] >= 281.25) & (data18['풍향(16방위)'] < 303.75) , '풍향'] = "서북서"
data18.loc[(data18['풍향(16방위)'] >= 303.75) & (data18['풍향(16방위)'] < 326.25) , '풍향'] = "북서"
data18.loc[(data18['풍향(16방위)'] >= 326.25) & (data18['풍향(16방위)'] < 348.75) , '풍향'] = "북북서"
data18.loc[(data18['풍향(16방위)'] >=348.75) & (data18['풍향(16방위)'] <= 360) , '풍향'] = "북"

data19.loc[(data19['풍향(16방위)'] >= 0.0) & (data19['풍향(16방위)'] < 11.25) , '풍향'] = "북"
data19.loc[(data19['풍향(16방위)'] >= 11.25) & (data19['풍향(16방위)'] < 33.75) , '풍향'] = "북북동"
data19.loc[(data19['풍향(16방위)'] >= 33.75) & (data19['풍향(16방위)'] < 56.25) , '풍향'] = "북동"
data19.loc[(data19['풍향(16방위)'] >= 56.25) & (data19['풍향(16방위)'] < 78.75) , '풍향'] = "동북동"
data19.loc[(data19['풍향(16방위)'] >= 78.75) & (data19['풍향(16방위)'] < 101.25) , '풍향'] = "동"
data19.loc[(data19['풍향(16방위)'] >= 101.25) & (data19['풍향(16방위)'] < 123.75) , '풍향'] = "동남동"
data19.loc[(data19['풍향(16방위)'] >= 123.75) & (data19['풍향(16방위)'] < 146.25) , '풍향'] = "남동"
data19.loc[(data19['풍향(16방위)'] >= 146.25) & (data19['풍향(16방위)'] < 168.75) , '풍향'] = "남남동"
data19.loc[(data19['풍향(16방위)'] >= 168.75) & (data19['풍향(16방위)'] < 191.25) , '풍향'] = "남"
data19.loc[(data19['풍향(16방위)'] >= 191.25) & (data19['풍향(16방위)'] < 213.75) , '풍향'] = "남남서"
data19.loc[(data19['풍향(16방위)'] >= 213.75) & (data19['풍향(16방위)'] < 236.25) , '풍향'] = "남서"
data19.loc[(data19['풍향(16방위)'] >= 236.25) & (data19['풍향(16방위)'] < 258.75) , '풍향'] = "서남서"
data19.loc[(data19['풍향(16방위)'] >= 258.75) & (data19['풍향(16방위)'] < 281.25) , '풍향'] = "서"
data19.loc[(data19['풍향(16방위)'] >= 281.25) & (data19['풍향(16방위)'] < 303.75) , '풍향'] = "서북서"
data19.loc[(data19['풍향(16방위)'] >= 303.75) & (data19['풍향(16방위)'] < 326.25) , '풍향'] = "북서"
data19.loc[(data19['풍향(16방위)'] >= 326.25) & (data19['풍향(16방위)'] < 348.75) , '풍향'] = "북북서"
data19.loc[(data19['풍향(16방위)'] >=348.75) & (data19['풍향(16방위)'] <= 360) , '풍향'] = "북"

data20.loc[(data20['풍향(16방위)'] >= 0.0) & (data20['풍향(16방위)'] < 11.25) , '풍향'] = "북"
data20.loc[(data20['풍향(16방위)'] >= 11.25) & (data20['풍향(16방위)'] < 33.75) , '풍향'] = "북북동"
data20.loc[(data20['풍향(16방위)'] >= 33.75) & (data20['풍향(16방위)'] < 56.25) , '풍향'] = "북동"
data20.loc[(data20['풍향(16방위)'] >= 56.25) & (data20['풍향(16방위)'] < 78.75) , '풍향'] = "동북동"
data20.loc[(data20['풍향(16방위)'] >= 78.75) & (data20['풍향(16방위)'] < 101.25) , '풍향'] = "동"
data20.loc[(data20['풍향(16방위)'] >= 101.25) & (data20['풍향(16방위)'] < 123.75) , '풍향'] = "동남동"
data20.loc[(data20['풍향(16방위)'] >= 123.75) & (data20['풍향(16방위)'] < 146.25) , '풍향'] = "남동"
data20.loc[(data20['풍향(16방위)'] >= 146.25) & (data20['풍향(16방위)'] < 168.75) , '풍향'] = "남남동"
data20.loc[(data20['풍향(16방위)'] >= 168.75) & (data20['풍향(16방위)'] < 191.25) , '풍향'] = "남"
data20.loc[(data20['풍향(16방위)'] >= 191.25) & (data20['풍향(16방위)'] < 213.75) , '풍향'] = "남남서"
data20.loc[(data20['풍향(16방위)'] >= 213.75) & (data20['풍향(16방위)'] < 236.25) , '풍향'] = "남서"
data20.loc[(data20['풍향(16방위)'] >= 236.25) & (data20['풍향(16방위)'] < 258.75) , '풍향'] = "서남서"
data20.loc[(data20['풍향(16방위)'] >= 258.75) & (data20['풍향(16방위)'] < 281.25) , '풍향'] = "서"
data20.loc[(data20['풍향(16방위)'] >= 281.25) & (data20['풍향(16방위)'] < 303.75) , '풍향'] = "서북서"
data20.loc[(data20['풍향(16방위)'] >= 303.75) & (data20['풍향(16방위)'] < 326.25) , '풍향'] = "북서"
data20.loc[(data20['풍향(16방위)'] >= 326.25) & (data20['풍향(16방위)'] < 348.75) , '풍향'] = "북북서"
data20.loc[(data20['풍향(16방위)'] >=348.75) & (data20['풍향(16방위)'] <= 360) , '풍향'] = "북"

data21.loc[(data21['풍향(16방위)'] >= 0.0) & (data21['풍향(16방위)'] < 11.25) , '풍향'] = "북"
data21.loc[(data21['풍향(16방위)'] >= 11.25) & (data21['풍향(16방위)'] < 33.75) , '풍향'] = "북북동"
data21.loc[(data21['풍향(16방위)'] >= 33.75) & (data21['풍향(16방위)'] < 56.25) , '풍향'] = "북동"
data21.loc[(data21['풍향(16방위)'] >= 56.25) & (data21['풍향(16방위)'] < 78.75) , '풍향'] = "동북동"
data21.loc[(data21['풍향(16방위)'] >= 78.75) & (data21['풍향(16방위)'] < 101.25) , '풍향'] = "동"
data21.loc[(data21['풍향(16방위)'] >= 101.25) & (data21['풍향(16방위)'] < 123.75) , '풍향'] = "동남동"
data21.loc[(data21['풍향(16방위)'] >= 123.75) & (data21['풍향(16방위)'] < 146.25) , '풍향'] = "남동"
data21.loc[(data21['풍향(16방위)'] >= 146.25) & (data21['풍향(16방위)'] < 168.75) , '풍향'] = "남남동"
data21.loc[(data21['풍향(16방위)'] >= 168.75) & (data21['풍향(16방위)'] < 191.25) , '풍향'] = "남"
data21.loc[(data21['풍향(16방위)'] >= 191.25) & (data21['풍향(16방위)'] < 213.75) , '풍향'] = "남남서"
data21.loc[(data21['풍향(16방위)'] >= 213.75) & (data21['풍향(16방위)'] < 236.25) , '풍향'] = "남서"
data21.loc[(data21['풍향(16방위)'] >= 236.25) & (data21['풍향(16방위)'] < 258.75) , '풍향'] = "서남서"
data21.loc[(data21['풍향(16방위)'] >= 258.75) & (data21['풍향(16방위)'] < 281.25) , '풍향'] = "서"
data21.loc[(data21['풍향(16방위)'] >= 281.25) & (data21['풍향(16방위)'] < 303.75) , '풍향'] = "서북서"
data21.loc[(data21['풍향(16방위)'] >= 303.75) & (data21['풍향(16방위)'] < 326.25) , '풍향'] = "북서"
data21.loc[(data21['풍향(16방위)'] >= 326.25) & (data21['풍향(16방위)'] < 348.75) , '풍향'] = "북북서"
data21.loc[(data21['풍향(16방위)'] >=348.75) & (data21['풍향(16방위)'] <= 360) , '풍향'] = "북"

data18

"""## 방향별로집계
df.groupby('gender')['height'].agg(**{'mean_height':'mean'}).reset_index()
"""

data18 = data18.groupby(['풍향D','풍향'])['1시간평균 미세먼지농도(㎍/㎥)'].agg(**{'mean_미세먼지':'mean'}).reset_index().sort_values('풍향D')

data18

data19 = data19.groupby(['풍향D','풍향'])['1시간평균 미세먼지농도(㎍/㎥)'].agg(**{'mean_미세먼지':'mean'}).reset_index().sort_values('풍향D')

data19

data20 = data20.groupby(['풍향D','풍향'])['1시간평균 미세먼지농도(㎍/㎥)'].agg(**{'mean_미세먼지':'mean'}).reset_index().sort_values('풍향D')

data20

data21 = data21.groupby(['풍향D','풍향'])['1시간평균 미세먼지농도(㎍/㎥)'].agg(**{'mean_미세먼지':'mean'}).reset_index().sort_values('풍향D')

data21

"""## 시각화"""

data18r0 = []
data18r1 = []
data18r2 = []
data18r3 = []
data18theta0 = []
data18theta1 = []
data18theta2 = []
data18theta3 = []
for i in range(len(data18['mean_미세먼지'])):
  if data18['mean_미세먼지'][i] <= 30:
    data18theta0.append(data18['풍향D'][i])
    data18r0.append(data18['mean_미세먼지'][i])
    
  elif data18['mean_미세먼지'][i] >30 and data18['mean_미세먼지'][i] <=80:
    data18theta1.append(data18['풍향D'][i])
    data18r1.append(data18['mean_미세먼지'][i])

  elif data18['mean_미세먼지'][i] >80 and data18['mean_미세먼지'][i] <=150:
    data18theta2.append(data18['풍향D'][i])
    data18r2.append(data18['mean_미세먼지'][i])

  else:
    data18theta3.append(data18['풍향D'][i])
    data18r3.append(data18['mean_미세먼지'][i])
print(data18theta0)
print(data18theta1)
print(data18theta2)
print(data18theta3)

print(data18r0)

data19r0 = []
data19r1 = []
data19r2 = []
data19r3 = []
data19theta0 = []
data19theta1 = []
data19theta2 = []
data19theta3 = []
for i in range(len(data19['mean_미세먼지'])):
  if data19['mean_미세먼지'][i] <= 30:
    data19theta0.append(data19['풍향D'][i])
    data19r0.append(data19['mean_미세먼지'][i])
    
  elif data19['mean_미세먼지'][i] >30 and data19['mean_미세먼지'][i] <=80:
    data19theta1.append(data19['풍향D'][i])
    data19r1.append(data19['mean_미세먼지'][i])

  elif data19['mean_미세먼지'][i] >80 and data19['mean_미세먼지'][i] <=150:
    data19theta2.append(data19['풍향D'][i])
    data19r2.append(data19['mean_미세먼지'][i])

  else:
    data19theta3.append(data19['풍향D'][i])
    data19r3.append(data19['mean_미세먼지'][i])
print(data19theta0)
print(data19theta1)
print(data19theta2)
print(data19theta3)
print(data19r1)

data20r0 = []
data20r1 = []
data20r2 = []
data20r3 = []
data20theta0 = []
data20theta1 = []
data20theta2 = []
data20theta3 = []
for i in range(len(data20['mean_미세먼지'])):
  if data20['mean_미세먼지'][i] <= 30:
    data20theta0.append(data20['풍향D'][i])
    data20r0.append(data20['mean_미세먼지'][i])
    
  elif data20['mean_미세먼지'][i] >30 and data20['mean_미세먼지'][i] <=80:
    data20theta1.append(data20['풍향D'][i])
    data20r1.append(data20['mean_미세먼지'][i])

  elif data20['mean_미세먼지'][i] >80 and data20['mean_미세먼지'][i] <=150:
    data20theta2.append(data20['풍향D'][i])
    data20r2.append(data20['mean_미세먼지'][i])

  else:
    data20theta3.append(data20['풍향D'][i])
    data20r3.append(data20['mean_미세먼지'][i])
print(data20theta0)
print(data20theta1)
print(data20theta2)
print(data20theta3)
print(data20r1)

data21r0 = []
data21r1 = []
data21r2 = []
data21r3 = []
data21theta0 = []
data21theta1 = []
data21theta2 = []
data21theta3 = []
for i in range(len(data21['mean_미세먼지'])):
  if data21['mean_미세먼지'][i] <= 30:
    data21theta0.append(data21['풍향D'][i])
    data21r0.append(data21['mean_미세먼지'][i])
    
  elif data21['mean_미세먼지'][i] >30 and data21['mean_미세먼지'][i] <=80:
    data21theta1.append(data21['풍향D'][i])
    data21r1.append(data21['mean_미세먼지'][i])

  elif data21['mean_미세먼지'][i] >80 and data21['mean_미세먼지'][i] <=150:
    data21theta2.append(data21['풍향D'][i])
    data21r2.append(data21['mean_미세먼지'][i])

  else:
    data21theta3.append(data21['풍향D'][i])
    data21r3.append(data21['mean_미세먼지'][i])

print(data21theta0)
print(data21theta1)
print(data21theta2)
print(data21theta3)

print(data21r2)

from plotly.subplots import make_subplots
import plotly.graph_objects as go
fig = make_subplots(
    rows=2, cols=2,
    specs = [[{'type': 'polar'}]*2,[{'type': 'polar'}]*2],
    subplot_titles = ('2018', '2019', '2020', '2021'),
    
    
   
)
# 2018
fig.add_trace(go.Barpolar(
    
    r = data18r0,
    theta = data18theta0,
    #base = '0',
    #tick = [],
    #name = '2018',
    # = [data18['풍향D'][0],data18['풍향D'][1],data18['풍향D'][2],data18['풍향D'][3],data18['풍향D'][4],data18['풍향D'][5],data18['풍향D'][6],data18['풍향D'][7],data18['풍향D'][8],data18['풍향D'][9],data18['풍향D'][10],data18['풍향D'][11],data18['풍향D'][12],data18['풍향D'][13],data18['풍향D'][14],data18['풍향D'][15]],
    marker_color='#B6FFB4',
    marker_line_color="black",
    marker_line_width=1,
    opacity=0.8,
    name = '~30㎍/㎥'), row=1, col=1,
    
)
fig.add_trace(go.Barpolar(
    r = data18r1,
    theta = data18theta1,
    marker_color = '#FFDF70',
    marker_line_color="black",
    marker_line_width=1,
    opacity=0.8,
    name = '31~80㎍/㎥'
),row=1, col=1,

)
fig.add_trace(go.Barpolar(
    r = data18r2,
    theta = data18theta2,
    marker_color = '#FFAA70',
    marker_line_color="black",
    marker_line_width=1,
    opacity=0.8,
    name= '81~150㎍/㎥'),
    row=1, col=1

)
fig.add_trace(go.Barpolar(
    r = data18r3,
    theta = data18theta3,
    marker_color = '#8B0000',
    marker_line_color="black",
    marker_line_width=1,
    opacity=0.8,
    name= '150~㎍/㎥'),
    row=1, col=1

)
#2019
fig.add_trace(go.Barpolar(
    r = data19r0,
    theta = data19theta0,
    showlegend=False,
    #base = '0',
    #tick = [],
    #name = '2018',
    # = [data18['풍향D'][0],data18['풍향D'][1],data18['풍향D'][2],data18['풍향D'][3],data18['풍향D'][4],data18['풍향D'][5],data18['풍향D'][6],data18['풍향D'][7],data18['풍향D'][8],data18['풍향D'][9],data18['풍향D'][10],data18['풍향D'][11],data18['풍향D'][12],data18['풍향D'][13],data18['풍향D'][14],data18['풍향D'][15]],
    marker_color='#B6FFB4',
    marker_line_color="black",
    marker_line_width=1,
    opacity=0.8,
    ), row=1, col=2
)
fig.add_trace(go.Barpolar(
    r = data19r1,
    theta = data19theta1,
    showlegend=False,
    marker_color = '#FFDF70',
    marker_line_color="black",
    marker_line_width=1,
    opacity=0.8,
    
),row=1, col=2
)
fig.add_trace(go.Barpolar(
    r = data19r2,
    theta = data19theta2,
    showlegend=False,
    marker_color = '#FFAA70',
    marker_line_color="black",
    marker_line_width=1,
    opacity=0.8,
   ),
    row=1, col=2

)
fig.add_trace(go.Barpolar(
    r = data19r3,
    theta = data19theta3,
    marker_color = '#8B0000',
    marker_line_color="black",
    marker_line_width=1,
    opacity=0.8,
    name= '75~㎍/㎥'),
    row=1, col=2

)
# 20
fig.add_trace(go.Barpolar(
    r = data20r0,
    theta = data20theta0,
    showlegend=False,
    #base = '0',
    #tick = [],
    #name = '2018',
    # = [data18['풍향D'][0],data18['풍향D'][1],data18['풍향D'][2],data18['풍향D'][3],data18['풍향D'][4],data18['풍향D'][5],data18['풍향D'][6],data18['풍향D'][7],data18['풍향D'][8],data18['풍향D'][9],data18['풍향D'][10],data18['풍향D'][11],data18['풍향D'][12],data18['풍향D'][13],data18['풍향D'][14],data18['풍향D'][15]],
    marker_color='#B6FFB4',
    marker_line_color="black",
    marker_line_width=1,
    opacity=0.8,
    ), row=2, col=1
)
fig.add_trace(go.Barpolar(
    r = data20r1,
    theta = data20theta1,
    showlegend=False,
    marker_color = '#FFDF70',
    marker_line_color="black",
    marker_line_width=1,
    opacity=0.8,
    
),row=2, col=1
)
fig.add_trace(go.Barpolar(
    r = data20r2,
    theta = data20theta2,
    showlegend=False,
    marker_color = '#FFAA70',
    marker_line_color="black",
    marker_line_width=1,
    opacity=0.8,
    ),
    row=2, col=1

)
fig.add_trace(go.Barpolar(
    r = data20r3,
    theta = data20theta3,
    marker_color = '#8B0000',
    marker_line_color="black",
    marker_line_width=1,
    opacity=0.8,
    name= '75~㎍/㎥'),
    row=2, col=1

)
#21
fig.add_trace(go.Barpolar(
    r = data21r0,
    theta = data21theta0,
    showlegend=False,
    #base = '0',
    #tick = [],
    #name = '2018',
    # = [data18['풍향D'][0],data18['풍향D'][1],data18['풍향D'][2],data18['풍향D'][3],data18['풍향D'][4],data18['풍향D'][5],data18['풍향D'][6],data18['풍향D'][7],data18['풍향D'][8],data18['풍향D'][9],data18['풍향D'][10],data18['풍향D'][11],data18['풍향D'][12],data18['풍향D'][13],data18['풍향D'][14],data18['풍향D'][15]],
    marker_color='#B6FFB4',
    marker_line_color="black",
    marker_line_width=1,
    opacity=0.8,
    ), row=2, col=2
)
fig.add_trace(go.Barpolar(
    r = data21r1,
    theta = data21theta1,
    showlegend=False,
    marker_color = '#FFDF70',
    marker_line_color="black",
    marker_line_width=1,
    opacity=0.8,
    
),row=2, col=2
)
fig.add_trace(go.Barpolar(
    r = data21r2,
    theta = data21theta2,
    showlegend=False,
    marker_color = '#FFAA70',
    marker_line_color="black",
    marker_line_width=1,
    opacity=0.8,
    ),
    row=2, col=2

)
fig.add_trace(go.Barpolar(
    r = data21r3,
    theta = data21theta3,
    marker_color = '#8B0000',
    marker_line_color="black",
    marker_line_width=1,
    opacity=0.8,
    name= '75~㎍/㎥'),
    row=2, col=2

)

fig.update_layout({'annotations': 
                   [{'font': {'size': 16},
                     'showarrow': False,
                     'text': '2018',
                     'x': 0.025,
                     'xanchor': 'center',
                     'xref': 'paper',
                     'y': 1.0,
                     'yref': 'paper',
                     'yanchor': 'bottom'
                     },
                   {'font': {'size': 16},
                     'showarrow': False,
                     'text': '2019',
                     'x': 0.6,
                     'xanchor': 'center',
                     'xref': 'paper',
                     'y': 1.0,
                     'yref': 'paper',
                     'yanchor': 'bottom'
                     },
                    {'font': {'size': 16},
                     'showarrow': False,
                     'text': '2020',
                     'x': 0.025,
                     'xanchor': 'center',
                     'xref': 'paper',
                     'y': 0.35,
                     'yref': 'paper',
                     'yanchor': 'bottom'
                     },
                    {'font': {'size': 16},
                     'showarrow': False,
                     'text': '2021',
                     'x': 0.6,
                     'xanchor': 'center',
                     'xref': 'paper',
                     'y': 0.35,
                     'yref': 'paper',
                     'yanchor': 'bottom'
                     }]},
    title='풍향별 미세먼지 농도',
    polar_angularaxis_rotation=90,
    template=None,
    height = 1000, width= 1000,
    
    polar = dict(
       
        radialaxis = dict(range=[0, 80], showticklabels=True, ticks='inside'),
        angularaxis = dict(showticklabels=True,  direction = 'clockwise',ticks='outside')
    
    ),
    polar2 = dict(
       
        radialaxis = dict(range=[0, 80], showticklabels=True, ticks='inside'),
        angularaxis = dict(showticklabels=True,  direction = 'clockwise',ticks='outside')
    
    ),
    polar3 = dict(
       
        radialaxis = dict(range=[0, 80], showticklabels=True, ticks='inside'),
        angularaxis = dict(showticklabels=True,  direction = 'clockwise',ticks='outside')
    
    ),
    polar4 = dict(
       
        radialaxis = dict(range=[0, 80], showticklabels=True, ticks='inside'),
        angularaxis = dict(showticklabels=True,  direction = 'clockwise',ticks='outside')
    
    )
)
    


fig.show()

